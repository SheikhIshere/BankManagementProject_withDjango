view.py from transactions:

from django.views.generic import CreateView, ListView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib import messages
from django.http import HttpResponse
from django.db.models import Sum
from .models import Transaction
from .forms import DepositForm, WithdrawForm, LoanRequestForm
from .constants import DEPOSIT, WITHDRAWAL, LOAN_PAID, LOAN
from datetime import datetime
from django.shortcuts import get_object_or_404, redirect
from django.views import View
from django.urls import reverse_lazy


# Base mixin for handling transactions: deposit, withdraw, loan request
class TransactionCreateMixin(LoginRequiredMixin, CreateView):
    template_name = 'transactions/transaction_form.html'
    model = Transaction
    title = ''
    success_url = reverse_lazy('transaction_report')

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs.update({
            'account': self.request.user.account,
        })
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context.update({
            'title': self.title
        })
        return context


class DepositMoneyView(TransactionCreateMixin):
    form_class = DepositForm
    title = 'Deposit'

    def get_initial(self):
        return {'transaction_type': DEPOSIT}

    def form_valid(self, form):
        amount = form.cleaned_data.get('amount')
        account = self.request.user.account
        account.balance += amount
        account.save(update_fields=['balance'])
        messages.success(self.request, f'${amount} was deposited to your account successfully.')
        return super().form_valid(form)


class WithdrawMoneyView(TransactionCreateMixin):
    form_class = WithdrawForm
    title = 'Withdraw Money'

    def get_initial(self):
        return {'transaction_type': WITHDRAWAL}

    def form_valid(self, form):
        amount = form.cleaned_data.get('amount')
        account = self.request.user.account
        account.balance -= amount
        account.save(update_fields=['balance'])
        messages.success(self.request, f'${amount} was withdrawn from your account successfully.')
        return super().form_valid(form)


class LoanRequestView(TransactionCreateMixin):
    form_class = LoanRequestForm  # Correct form for loan request
    title = 'Request For Loan'

    def get_initial(self):
        return {'transaction_type': LOAN}

    def form_valid(self, form):
        amount = form.cleaned_data.get('amount')
        current_loan_count = Transaction.objects.filter(
            account=self.request.user.account, transaction_type=LOAN, loan_approve=True
        ).count()
        if current_loan_count >= 3:
            return HttpResponse('You have crossed your loan limit of 3 requests.')
        messages.success(self.request, f'Loan request worth {amount}$ has been successfully requested.')
        return super().form_valid(form)


class TransactionReportView(LoginRequiredMixin, ListView):
    template_name = 'transaction_report.html'  # Specify a template if needed
    model = Transaction
    balance = 0

    def get_queryset(self):
        queryset = super().get_queryset().filter(account=self.request.user.account)
        start_date_str = self.request.GET.get('start_date')
        end_date_str = self.request.GET.get('end_date')

        if start_date_str and end_date_str:
            start_date = datetime.strptime(start_date_str, "%y-%m-%d").date()
            end_date = datetime.strptime(end_date_str, "%y-%m-%d").date()

            queryset = queryset.filter(timestamp__gte=start_date, timestamp__lte=end_date)
            self.balance = queryset.aggregate(Sum('amount'))['amount__sum']
        
        else:
            self.balance = self.request.user.account.balance

        return queryset.distinct()
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context.update({
            'account': self.request.user.account
        })
        return context


class PayLoanView(LoginRequiredMixin, View):
    def get(self, request, loan_id):
        loan = get_object_or_404(Transaction, id=loan_id)
        if loan.loan_approve:  # Corrected this to directly access the field
            user_account = loan.account
            if loan.amount <= user_account.balance:  # Ensure you have enough balance
                user_account.balance -= loan.amount
                loan.balance_after_transaction = user_account.balance
                user_account.save()
                loan.transaction_type = LOAN_PAID
                loan.save()
                return redirect('transaction_report')  # Redirect to a report page, or wherever is appropriate
            else:
                messages.error(self.request, f'Loan amount is greater than available balance.')
                return redirect('loan_list')  # Redirect back to loan list
        else:
            messages.error(self.request, 'Loan not approved yet.')
            return redirect('loan_list')  # Handle the case when the loan is not approved yet

            

class LoanLisView(LoginRequiredMixin, ListView):
    model = Transaction
    template_name = 'transactions/loan_list.html'
    context_object_name = 'loans'

    def get_queryset(self):
        user_account = self.request.user.account
        queryset = Transaction.objects.filter(account=user_account, transaction_type=LOAN)
        return queryset


here is urls.py:
from django.urls import path
from .views import DepositMoneyView, WithdrawMoneyView, LoanRequestView, LoanLisView, PayLoanView, TransactionReportView

urlpatterns = [
    path('deposit/', DepositMoneyView.as_view(), name='deposit'),
    path('withdraw/', WithdrawMoneyView.as_view(), name='withdraw'),
    path('loan-request/', LoanRequestView.as_view(), name='loan_request'),
    path('loan-list/', LoanLisView.as_view(), name='loan_list'),
    path('pay-loan/<int:loan_id>/', PayLoanView.as_view(), name='pay_loan'),
    path('transaction-report/', TransactionReportView.as_view(), name='transaction_report'),
]
